generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// IDENTITY & ACCESS
// ============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  totpSecret    String?
  totpEnabled   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  memberships Membership[]
  auditLogs   AuditLog[]
  sessions    Session[]
  accounts    Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships    Membership[]
  subscriptions  Subscription[]
  invoices       Invoice[]
  creditWallet   CreditWallet?
  appInstalls    AppInstall[]
  assets         Asset[]
  featureFlags   FeatureFlag[]
  auditLogs      AuditLog[]
  invites        Invite[]
  apiKeys        ApiKey[]
  newsletterSubs NewsletterSub[]

  @@map("organizations")
}

model Membership {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
  @@map("memberships")
}

model Invite {
  id        String   @id @default(cuid())
  orgId     String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("invites")
}

model ApiKey {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  key       String   @unique
  lastUsed  DateTime?
  createdAt DateTime @default(now())

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// ============================================================================
// BILLING
// ============================================================================

enum PlanCode {
  STARTER
  PRO
  SCALE
}

model Plan {
  id              String   @id @default(cuid())
  code            PlanCode @unique
  name            String
  monthlyUsd      Int      @default(0)
  includedCredits Int      @default(0)
  discountPct     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  subscriptions Subscription[]
  priceMaps     PriceMap[]

  @@map("plans")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  PAUSED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

model Subscription {
  id                 String             @id @default(cuid())
  orgId              String
  planId             String
  status             SubscriptionStatus @default(ACTIVE)
  provider           PaymentProvider
  externalId         String?
  externalCustomerId String?
  periodStart        DateTime?
  periodEnd          DateTime?
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  plan         Plan         @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Invoice {
  id              String          @id @default(cuid())
  orgId           String
  amountUsd       Int
  description     String
  provider        PaymentProvider
  externalId      String?
  paidAt          DateTime?
  invoiceUrl      String?
  receiptUrl      String?
  status          String          @default("pending")
  createdAt       DateTime        @default(now())

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

// ============================================================================
// CREDITS
// ============================================================================

enum WalletScope {
  ORG
  USER
}

model CreditWallet {
  id        String      @id @default(cuid())
  scope     WalletScope
  orgId     String?     @unique
  userId    String?
  balance   Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  organization  Organization?      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  transactions  CreditTransaction[]
  autoRecharges AutoRecharge[]

  @@map("credit_wallets")
}

enum TransactionType {
  TOPUP
  BONUS
  SPEND
  REFUND
  ADJUST
}

model CreditTransaction {
  id            String          @id @default(cuid())
  walletId      String
  type          TransactionType
  amount        Int
  balanceBefore Int
  balanceAfter  Int
  description   String?
  meterId       String?
  appId         String?
  taskType      String?
  userId        String?
  correlationId String?
  createdAt     DateTime        @default(now())

  wallet CreditWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  meter  Meter?       @relation(fields: [meterId], references: [id])
  app    App?         @relation(fields: [appId], references: [id])

  @@index([walletId, createdAt])
  @@index([correlationId])
  @@map("credit_transactions")
}

model AutoRecharge {
  id         String   @id @default(cuid())
  walletId   String
  enabled    Boolean  @default(true)
  threshold  Int
  amount     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  wallet CreditWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("auto_recharges")
}

model Meter {
  id          String   @id @default(cuid())
  appId       String?
  code        String   @unique
  label       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  app          App?                @relation(fields: [appId], references: [id])
  priceMaps    PriceMap[]
  transactions CreditTransaction[]

  @@map("meters")
}

model PriceMap {
  id        String   @id @default(cuid())
  planId    String
  meterId   String
  credits   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan  Plan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  meter Meter @relation(fields: [meterId], references: [id], onDelete: Cascade)

  @@unique([planId, meterId])
  @@map("price_maps")
}

// ============================================================================
// APPS & PLUGINS
// ============================================================================

model App {
  id          String   @id @default(cuid())
  appId       String   @unique
  name        String
  description String?
  iconUrl     String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  versions     AppVersion[]
  installs     AppInstall[]
  permissions  AppPermission[]
  taskTypes    AppTaskType[]
  meters       Meter[]
  transactions CreditTransaction[]

  @@map("apps")
}

model AppVersion {
  id          String   @id @default(cuid())
  appId       String
  version     String
  manifest    Json
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())

  app      App          @relation(fields: [appId], references: [id], onDelete: Cascade)
  installs AppInstall[]

  @@unique([appId, version])
  @@map("app_versions")
}

model AppInstall {
  id        String   @id @default(cuid())
  orgId     String
  appId     String
  versionId String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  app          App          @relation(fields: [appId], references: [id], onDelete: Cascade)
  version      AppVersion   @relation(fields: [versionId], references: [id])

  @@unique([orgId, appId])
  @@map("app_installs")
}

model AppPermission {
  id         String   @id @default(cuid())
  appId      String
  scope      String
  label      String
  required   Boolean  @default(false)
  createdAt  DateTime @default(now())

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@map("app_permissions")
}

model AppTaskType {
  id          String   @id @default(cuid())
  appId       String
  code        String
  label       String
  description String?
  createdAt   DateTime @default(now())

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([appId, code])
  @@map("app_task_types")
}

// ============================================================================
// ASSETS & CONTENT
// ============================================================================

enum AssetKind {
  LOGO
  BRAND_KIT
  NEWSLETTER_RSS
  OTHER
}

model Asset {
  id        String    @id @default(cuid())
  orgId     String
  kind      AssetKind
  url       String
  name      String?
  meta      Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("assets")
}

model NewsletterSub {
  id        String   @id @default(cuid())
  orgId     String
  email     String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, email])
  @@map("newsletter_subs")
}

// ============================================================================
// OPERATIONS
// ============================================================================

model FeatureFlag {
  id        String   @id @default(cuid())
  orgId     String?
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, key])
  @@map("feature_flags")
}

model WebhookEvent {
  id         String          @id @default(cuid())
  provider   PaymentProvider
  eventType  String
  eventId    String          @unique
  payload    Json
  processed  Boolean         @default(false)
  error      String?
  createdAt  DateTime        @default(now())
  processedAt DateTime?

  @@index([provider, processed])
  @@map("webhook_events")
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String?
  userId    String?
  action    String
  target    String?
  targetId  String?
  meta      Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([orgId, createdAt])
  @@index([userId, createdAt])
  @@index([action])
  @@map("audit_logs")
}
